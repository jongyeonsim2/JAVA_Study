
1. 기존 프로그램의 기능 분석
   - 현재의 기능 분석
   - class 대상을 식별
     데이터 관점, 기능 관점
   - 계획 수립
     1단계 : 기능 및 클래스 식별( OOP 특성을 적용하기 위해서 )
     2단계 : 데이터 class 구현 ( entity class )
            컨트롤 class 구현 ( controller class )
            기타 클래스 구현
     3단계 : 버그 수정, 
            데이터 및 코드의 신뢰성을 높이기
     4단계 : 재사용성 높이기
     5단계 : 유지보수성 높이기

2. 기존 성적관리 프로그램을 OOP 기반으로 변경 및 구현
   - 학생정보 및 점수를 entity class 로 구현. 사용자 정의 타입으로 분석 및 구현.
   - entity class 타입의 객체 배열로 관리.
   - controller class 
   
3. 현재까지 수업 내용을 바탕으로 할 수 있는 것.
   - 프로그램의 구조성을 높일 수 있음.
   - 코드의 재사용성을 높일 수 있음.
   - 데이터 및 코드의 신뢰성을 높일 수 있음.
   
   - 유지보수성을 높이는 부분은 아직 더 학습이 필요함.
   
4. 
   - 개인 상담시 상담 자료로 활용.
   - 수업 진행시 참고하기 위한 자료로 활용.
   
   - 30분 ~ 1시간 정도 개인적으로 파악 및 정리
   - 팀 미팅을 진행. 
   - 구현범위 정하기.
   - 구현시 배운 범위로만 구현 => ver1
     선수하습한 내용을 범위에 추가 구현 => ver2
   - 2명씩 조를 나누어 진행.( 도움을 줄 수 있는 분, 도움을 받을 수 있는 분 )
   - 팀내에서 구현된 코드를 머지.
   
   - 팀장님 저한테 메일로 제출.
     diversim90@naver.com
     
     제목 : 학생성적관리 프로그램 OOP 버전( A팀 )
     첨부 : ver1, ver2 의 소스를 각각 별도의 폴더에 저장.
     
           클래스명, 메소드명, 기능명, 담당자, 완료유무, 난이도(상중하) 항목을 엑셀로 작성.
           하나의 엑셀 파일에 ver1, ver2 를 탭으로 분리하여 작성.
           
           소스폴더, 엑셀파일을 통째로 압축해서 zip 파일로 첨부.
     내용 : 진해시 애로사항, 어려웠던 점 등을 작성.
      
   - 제출 기한
     오늘 일과시간에 끝낼 수 있는 범위.
     오늘 중으로 끝낼 수 있는 범위.
   
   
   
   