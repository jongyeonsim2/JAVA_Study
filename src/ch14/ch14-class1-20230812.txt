
1. 람다식( Lambda expression ), javascript( 콜백함수, 화살표 함수 )
  1.1 람다식이란
   - JAVA 는 객체지향언어. 람다식이 적용이 되면서, 함수형 언어.
   
   - 람다식, 익명함수
     함수 표현시, 간략하면서 명확한 식으로 표현을 할 수 있음.
     
   - 람다식 작성
     메서드에서 이름과 반환타입을 제거 후, 매개변수와 선언부의 중괄호 사이에 
     "->" 를 추가하면 됨.
     
     일반적인 함수 형태
     int max( int a, int b ) {
     	return a > b ? a : b;
     }
     
     람다식으로 표현한 함수
     ( int a, int b ) -> {
     	return a > b ? a : b;
     }
     
     ( int a, int b ) -> a > b ? a : b;
     
     ( a, b ) -> a > b ? a : b;
     
     - 매개변수가 하나인 경우 : 괄호를 생략할 수 있음.
     ( a ) -> a * a;      a -> a * a; (ok)
     ( int a ) -> a * a;  int a > a * a; (ng)
     
     - { } 안의 문장이 하나일 경우는 { } 를 생략할 수 있음.
       return 문( return 키워 ) 이외의 하나의 문장인 경우만 가능.
       
       - return 하나의 문장은 식으로 표현이 가능. => return 을 생략 할 수 있음.
         { } 를 생략할 수 있음.
         
       - return 키워드를 사용한 하나의 문장은 { } 를 생략할 수 없음.
       
       
       System.out.println(); // return 이 없음.
       
       
  1.2 함수형 인터페이스( Functional Inteface )
  
     - 람다식 함수를 재사용하기 위해서 
       함수 선언 후 이름과 타입을 부여를 해야 사용해야 함.
     
     - 타입 : 함수형 인터페이스
       인터페이스를 통해 람다식을 다루기로 결정되어졌고, 람다식을 다루기 위한
       인터페이스를 "함수형 인터페이스" 라고 부르게 됨.
       
     - 함수형 인터페이스 구현
       1. 함수형 인터페이스 자체를 구현.
       2. 구현된 함수형 인터페이스를 반환하는 함수.
       3. 함수의 매개변수로 함수형 인터페이스를 사용.
       
     - 람다식의 형변환
       1. 대입 연산자의 양변의 타입을 일치시키기 위해서 형변환이 필요.
          // ( () -> {} ) 의 자료형을 모르겠다는 것. => 구체적으로 어떤 함수형 인터페이스인지를 모름.
          MyFunction f = ( () -> {} );
          MyFunction f = (MyFunction) ( () -> {} );
       2. 위에서 사용한 MyFunction 함수형 인터페이스와 구현부의 형태가 동일함으로 형변환 생략이 가능함.
       3. 람다식은 반드시 함수형 인터페이스로만 형변환이 가능.
       4. Object 로 형변환은 어떻게 하면 되는지?
          먼저 함수형 인터페이스로 형변환 후, Object 로 형변환을 진행하면 됨.
          Object f = (Object)(MyFunction) ( () -> {} );
     
     - 외부 변수를 참조하는 람다식
       1. 중첩 클래스 ( Outer class, Inner class ) 
          Outer class 의 멤버 변수를 참조
       2. Inner class 의 멤버 변수를 참조
       3. Inner class 의 멤버 메소드의 매개 변수 = > 지역 변수
       4. Inner class 의 멤버 메소드의 지역 변수
       
       람다식 내에서 참조하는 변수중에서 지역변수는 final를 사용하지 않아도
	   상수로 취급되어서 값의 변경을 할 수 없음.
	   
	   람다식 에서 사용되는 매개변수는 지역변수의 이름과 동일하면 에러가 됨.
     
     
     - 자바에서 제공하는 함수형 인터페이스 
       - java.util.function 패키지에 있음.
       - 재사용성, 유지보수성, 구현 코드의 일관성(통일) 등의 장점이 있음.
       - 기본형
         - java.lang.Runnable	: 매개변수 없음, 반환값 없음.
         - Supplier<T>			: 반환값만 있음.
         - Consumer<T>			: 매개변수만 있음.
         - Function<T, R>		: 하나의 매개 변수를 받아서, 결과를 반환
         - Predicate<T>			: 조건식을 표현. 매개변수는 하나, 반환타입은 boolean.
         
       - 매개변수가 두 개인 경우
         - BiConsumer<T, U>		: 두 개의 매개변수가 있음. 반환값은 없음.
         - BiPredicate<T, U>	: 조건식을 표현. 매개변수는 두 개, 반환타입은 boolean.
         - BiFunction<T, U, R>	: 매개변수는 두 개, 하나의 결과를 반환.
       
  1.3 함수형 인터페이스 작성
  
       - 자바에서 제공하는 함수의 원형을 파악시 매개변수 타입을 함수형 인터페이스 확인.
         => 매개변수의 타입에 맞는 람다식을 작성. => 함수형 프로그래밍
         
       - 사용자 정의 함수 구현시, 매개변수로 함수형 인터페이스로 구현.
         => 함수형 인터페이스 의 추상 메소드로 실행 => 구현한 람다식이 실행 => 함수형 프로그래밍
         
       - 실제 자료를 저장시 사용하는 데이터 타입은 wrapper class 를 사용. => Integer 를 사용함.
         장점도 있지만, 단점으로는 성능이 낮아서, int 형으로 사용할 수 있는 함수형 인터페이스를 제공됨.
         
			Supplier  : IntSupplier 
			Consumer  : IntConsumer
			Predicate : IntPredicate
			Function  : IntFunction
         
         
         
     
     
     
     
     
     