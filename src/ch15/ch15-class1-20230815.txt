1. 입출력( IO, Input Output )
   1.1 스트림(stream)
      - 데이터를 운반하는데 사용되는 통로. 
      - 단방향 통신.
      - 읽고, 쓰기를 동시에 하면, 단 방향 통신이 두 개가 있어야 함으로,
        스트림이 두 개가 필요함.
        읽기 : InputStream( 바이트 기반 )
        쓰기 : OutputStream( 바이트 기반 )
      - 자바에서는 문자처리시 2byte 단위로 하기 때문에,
        바이트기반의 스트림을 사용하게 되면, 문자 깨지게 됨.
        => 문자기반의 스트림( Reader, Writer )
        
   1.2 스트림의 종료
       바이트 스트림, 문자 스트림, 보조 스트림.
       
   1.3 스트림의 대상
       메모리( 배열, 멀티스레드의 프로세스간 통신 ), 
       file, 
       네트워크
       
       직렬화, 역직렬화
       
   1.4 바이트 기반 스트림
       표 15-1 참고
       
   1.5 보조 스트림
       데이터를 입출력하는 기능은 없지만, 스트림의 기능을 향상시키거나
       새로운 기능을 추가할 경우 사용되는 스트림.
       
       표 15-3 참고
       BufferedInputStream, SequenceInputStream( output 없음),
       ObjectInputStream
       
       
   1.6 문자기반 스트림( 2byte 단위로 처리 )
       각 메소드의 매개변수가 char[] 로 사용되고 있음을 알 수 있음.
   
       표 15-4 참고
       표 15-5 참고
       표 15-6 참고
       
       
2. 바이트 기반 스트림
   2.1 InputStream, OutputStream
       InputStream, OutputStream 은 모든 바이트 기반 스트림의 조상임.
   
       표 15-7, 표 15-8 참조 에서 메소드 확인
       
       InputStream.available() : 읽어 올 수 있는 데이터의 크기를 반환.
          blocking 없이 읽어 올 수 있는 바이트의 수를 반환.
          blocking 이란 데이터를 읽어 올 때 데이터를 기다리기 위해 멉춰있는 것을 의미함.
          기다리지 않고 바로 읽어 올 수 있는 바이트의 수를 반환함.
   
   2.2 ByteArrayInputStream, ByteArrayOutputStream ( 메모리 대상 )
   	   - 메모리, 바이트배열에 데이터를 입출력하는데 사용되는 스트림.
   	   - 주로 다른 곳에 입출력하기 전에 데이터를 임시로 담아서 변환작업을
   	    하는데 사용됨.
   
   2.3 FileInputStream, FileOutputStream ( 파일 대상 )
   	    표 15-9 참조


3. 바이트 기반의 보조 스트림 ( 입출력 성능 향상이 목적 )
   스스로 입출력을 할 수 없음.
   
   3.1 BufferedInputStream, BufferedOutputStream
       스트림의 입출력 효율을 높이기 위해 버퍼를 사용하는 보조스트림.

       표 15-10 참조
       
       3.1.1
       버퍼가 가득 차면, 버퍼의 모든 내용을 출력 소스에 출력함.
       버퍼를 비고우 다시 프로그램으로부터의 출력을 저장할 준비를 하게 됨.
       
       마지막 출력 부분에서 출력소스에 쓰지 못하고 버퍼에 남아 있는 상태로
       프로그램이 종료될 수 있음에 주의.
       
       그래서, 프로그램 마지막에 flush() 또는 close()를 반드시 호출해야 함.
       
       3.1.2
       BufferedOutputStream.close() 만 하더라도, OutputStream( 파일 등 )의
       close() 가 호출됨.
       
   
   3.2 SequenceInputStream
       여러 개의 입력스트림을 연속적으로 연결해서 하나의 스트림으로부터 데이터를 읽도록 하는 보조 스트림.
       
       SequenceInputStream 의 생성자의 매개변수는 Enumeration, InputStream임.
       
       표 15-14 참조.
       
       - collection
         다수의 데이터를 처리하는 경우에 사용됨.
         
       - Iterator
         컬렉션에 저장된 요소를 읽어오는 방법을 표준화한 Interface.
       
       - Enumeration
         Iterator 의 구버전. 
         컬렉션 프레임워크가 만들어지기 이전에 사용되었는 것.
       
       - hasNext()
         Iterator, Enumeration 의 메소드.
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       



       
   